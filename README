--------File Overview

utils.py: some utility functions 
tran3D.py: conversions between different representations of SO(3), such as euler angle -> rotation matrix and quaternion -> rotation matrix
net2d.py: elementary layer functions including convolutional layer, fully connected layer and GAP layer
single_key_net.py: higher abstraction for constructing DISCO net, which stacks the complete network. It also contains the loss function. Right now, this re-implementation does not incorporate viewpoint into the deep supervision.
train_car_key.py: training script for end-to-end 2D keypoint regression
train_car_23d.py: training script for 2D+3D keypoint regression
train_car_os23d.py: training script for 2D+3D+occlusion flags
hg_23d.py: training script for hg_23d modification on neural network(network structure shown in presentation. Also can be found in code.
hg_os23d.py: training script for hg_os23d modification on neural network(network structure shown in presentation. Also can be found in code.
val_single_key_from_raw.py: estimate keypoints for all rgb images in a folder. All images are transformed by iso-tropic warping, where image height and width are warped to 64.
val_single_key_from_noniso_raw.py: estimate keypoints for all rgb images in a folder. All images are transformed by non isotropic warping, where input image preserves the original aspect ratio and padded with gray areas for redundant parts.

val_single_key_for_TK.py: estimate keypoints for all rgb images arranged in DIVA file structure. All images are transformed by iso-tropic warping, where image height and width are warped to 64.
val_single_key_noniso_for_TK.py: estimate keypoints for all rgb images in DIVA file structure. All images are transformed by non isotropic warping, where input image preserves the original aspect ratio and padded with gray areas for redundant parts.

tf_noniso_car_full.py and tf_noniso_car_multi.py: two example codes that teach you how to generate the tfrecord for training script and what data structure inside each tfrecord datum
hg_train_os23d.py: training script for hourglass occlusion mask-3d-2d model.
hg_train_23d.py: training script for hourglass 3d-2d model.

--------Notes

In this implementation, the main warping method we use is non-isotropic warping, which is different from the original paper. Therefore, please mainly look at val_single_from_noniso_raw.py or val_single_key_noniso_for_TK.py.

The model path in validation code should be the same as the output path of training code.



